{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1714990317305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1714990326005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n Add a todo with the entered title on the form submit:\n \n - text field should be focused by default;\n + if the title is empty show the `Title should not be empty` notification at the bottom;\n-- trim the title when checked or saved;\n++ trim the title when checked or saved;\n - use your `userId` for the new todo;\n - send a POST request to the API (check the [API Documentation](https://mate-academy.github.io/fe-students-api/))\n - disable the input until receiving a response from the API;\n - immediately after sending a request create a todo with `id: 0` and save it to the `tempTodo` variable in the state (NOT to the `todos` array);\n"
                },
                {
                    "date": 1714993539270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n ## Adding a todo\n \n Add a todo with the entered title on the form submit:\n \n-- text field should be focused by default;\n++ text field should be focused by default;\n + if the title is empty show the `Title should not be empty` notification at the bottom;\n + trim the title when checked or saved;\n - use your `userId` for the new todo;\n - send a POST request to the API (check the [API Documentation](https://mate-academy.github.io/fe-students-api/))\n"
                },
                {
                    "date": 1714995255660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n + if the title is empty show the `Title should not be empty` notification at the bottom;\n + trim the title when checked or saved;\n - use your `userId` for the new todo;\n - send a POST request to the API (check the [API Documentation](https://mate-academy.github.io/fe-students-api/))\n-- disable the input until receiving a response from the API;\n++ disable the input until receiving a response from the API;\n - immediately after sending a request create a todo with `id: 0` and save it to the `tempTodo` variable in the state (NOT to the `todos` array);\n - show an independent `TodoItem` **after** the list if `tempTodo` is not `null`;\n - temp TodoItem should have the loader (check the original markup);\n - in case of success add the todo created by the API to the array (take it from the POST response);\n"
                },
                {
                    "date": 1715092147532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,10 @@\n + trim the title when checked or saved;\n - use your `userId` for the new todo;\n - send a POST request to the API (check the [API Documentation](https://mate-academy.github.io/fe-students-api/))\n + disable the input until receiving a response from the API;\n-- immediately after sending a request create a todo with `id: 0` and save it to the `tempTodo` variable in the state (NOT to the `todos` array);\n-- show an independent `TodoItem` **after** the list if `tempTodo` is not `null`;\n+<!-- - immediately after sending a request create a todo with `id: 0` and save it to the `tempTodo` variable in the state (NOT to the `todos` array);\n+- show an independent `TodoItem` **after** the list if `tempTodo` is not `null`; -->\n - temp TodoItem should have the loader (check the original markup);\n - in case of success add the todo created by the API to the array (take it from the POST response);\n - in case of an API error showing `Unable to add a todo` notification at the bottom;\n - set `tempTodo` to `null` to hide the extra `TodoItem`;\n"
                },
                {
                    "date": 1715092687578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,10 @@\n + trim the title when checked or saved;\n - use your `userId` for the new todo;\n - send a POST request to the API (check the [API Documentation](https://mate-academy.github.io/fe-students-api/))\n + disable the input until receiving a response from the API;\n-<!-- - immediately after sending a request create a todo with `id: 0` and save it to the `tempTodo` variable in the state (NOT to the `todos` array);\n-- show an independent `TodoItem` **after** the list if `tempTodo` is not `null`; -->\n+- immediately after sending a request create a todo with `id: 0` and save it to the `tempTodo` variable in the state (NOT to the `todos` array);\n+- show an independent `TodoItem` **after** the list if `tempTodo` is not `null`;\n - temp TodoItem should have the loader (check the original markup);\n - in case of success add the todo created by the API to the array (take it from the POST response);\n - in case of an API error showing `Unable to add a todo` notification at the bottom;\n - set `tempTodo` to `null` to hide the extra `TodoItem`;\n"
                },
                {
                    "date": 1715335695128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n ## Instructions\n - Install Prettier Extention and use this [VSCode settings](https://mate-academy.github.io/fe-program/tools/vscode/settings.json) to enable format on save.\n - Implement a solution following the [React task guideline](https://github.com/mate-academy/react_task-guideline#react-tasks-guideline).\n - Use the [React TypeScript cheat sheet](https://mate-academy.github.io/fe-program/js/extra/react-typescript).\n-- Replace `<your_account>` with your Github username in the [DEMO LINK](https://<your_account>.github.io/react_todo-app-add-and-delete/) and add it to the PR description.\n+- Replace `<your_account>` with your Github username in the [DEMO LINK](https://.github.io/react_todo-app-add-and-delete/) and add it to the PR description.\n \n ## IF you want to implement smooth animations\n \n <details>\n"
                }
            ],
            "date": 1714990317305,
            "name": "Commit-0",
            "content": "# React Todo App Add and Delete\n\nIt is the second part of the React Todo App with API.\n\nTake your code implemented for [Loading todos](https://github.com/mate-academy/react_todo-app-loading-todos)\nand implement the ability to add and remove todos.\n\n> Here is [the working example](https://mate-academy.github.io/react_todo-app-with-api/)\n# ❗️❗️❗️</br>Please implement only adding and deleting todos in addition to what was already implemented.<br><br>All the other features from the working version will be implemented in the next task.</br>❗️❗️❗️\n\n> Check the [API Documentation](https://mate-academy.github.io/fe-students-api/)\n\n## Adding a todo\n\nAdd a todo with the entered title on the form submit:\n\n- text field should be focused by default;\n+ if the title is empty show the `Title should not be empty` notification at the bottom;\n- trim the title when checked or saved;\n- use your `userId` for the new todo;\n- send a POST request to the API (check the [API Documentation](https://mate-academy.github.io/fe-students-api/))\n- disable the input until receiving a response from the API;\n- immediately after sending a request create a todo with `id: 0` and save it to the `tempTodo` variable in the state (NOT to the `todos` array);\n- show an independent `TodoItem` **after** the list if `tempTodo` is not `null`;\n- temp TodoItem should have the loader (check the original markup);\n- in case of success add the todo created by the API to the array (take it from the POST response);\n- in case of an API error showing `Unable to add a todo` notification at the bottom;\n- set `tempTodo` to `null` to hide the extra `TodoItem`;\n- focus the text field after receiving a response;\n- clear the text in case of success;\n- keep the text in case of error;\n\n> Don't try to implement animations for adding or removing Todos (at least until you finish everything else).\n> If you really feel confident to try, there is a hint at the end of the description.\n\n## Deleting todos\n\nRemove a todo on the `TodoDeleteButton` click:\n\n- covered the todo with the loader while waiting for the API response;\n- remove the todo from the list on success;\n- in case of API error show `Unable to delete a todo` notification at the bottom (the todo must stay in the list);\n\nRemove all the completed todos after the `Clear completed` button click:\n\n- the button should be enabled only if there is at least 1 completed todo;\n- the deletion should work as several individual deletions running at the same time;\n- in case of any error show error message but process success deletions;\n\n## If you want to enable tests\n- open `cypress/integration/page.spec.js`\n- replace `describe.skip` with `describe` for the root `describe`\n\n## Instructions\n- Install Prettier Extention and use this [VSCode settings](https://mate-academy.github.io/fe-program/tools/vscode/settings.json) to enable format on save.\n- Implement a solution following the [React task guideline](https://github.com/mate-academy/react_task-guideline#react-tasks-guideline).\n- Use the [React TypeScript cheat sheet](https://mate-academy.github.io/fe-program/js/extra/react-typescript).\n- Replace `<your_account>` with your Github username in the [DEMO LINK](https://<your_account>.github.io/react_todo-app-add-and-delete/) and add it to the PR description.\n\n## IF you want to implement smooth animations\n\n<details>\n  <summary>Click here to see the hint</summary>\n\n  Use [React Transition Group](https://reactcommunity.org/react-transition-group/transition-group)\n\n  ```tsx\n  <section className=\"todoapp__main\" data-cy=\"TodoList\">\n    <TransitionGroup>\n      {visibleTodos.map(todo => (\n        <CSSTransition\n          key={todo.id}\n          timeout={300}\n          classNames=\"item\"\n        >\n          <TodoItem\n            todo={todo}\n            isProcessed={processings.includes(todo.id)}\n            onDelete={() => deleteTodo(todo.id)}\n            onUpdate={updateTodo}\n          />\n        </CSSTransition>\n      ))}\n\n      {creating && (\n        <CSSTransition\n          key={0}\n          timeout={300}\n          classNames=\"temp-item\"\n        >\n          <TodoItem\n            todo={{\n              id: Math.random(),\n              title,\n              completed: false,\n              userId: user.id,\n            }}\n            isProcessed\n          />\n        </CSSTransition>\n      )}\n    </TransitionGroup>\n  </section>\n  ```\n\n  Here are the styles used in this example\n  ```css\n  .item-enter {\n    max-height: 0;\n  }\n\n  .item-enter-active {\n    overflow: hidden;\n    max-height: 58px;\n    transition: max-height 0.3s ease-in-out;\n  }\n\n  .item-exit {\n    max-height: 58px;\n  }\n\n  .item-exit-active {\n    overflow: hidden;\n    max-height: 0;\n    transition: max-height 0.3s ease-in-out;\n  }\n\n  .temp-item-enter {\n    max-height: 0;\n  }\n\n  .temp-item-enter-active {\n    overflow: hidden;\n    max-height: 58px;\n    transition: max-height 0.3s ease-in-out;\n  }\n\n  .temp-item-exit {\n    max-height: 58px;\n  }\n\n  .temp-item-exit-active {\n    transform: translateY(-58px);\n    max-height: 0;\n    opacity: 0;\n    transition: 0.3s ease-in-out;\n    transition-property: opacity, max-height, transform;\n  }\n\n  .has-error .temp-item-exit-active {\n    transform: translateY(0);\n    overflow: hidden;\n  }\n  ```\n</details>\n"
        }
    ]
}