{
    "sourceFile": "src/components/ErrorNotification.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1715157217556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1715157329302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,15 +25,14 @@\n \n type Props = {\n   errorType: ErrorType | null;\n   handleClosingError: () => void;\n-  errorCases: {};\n };\n \n export const ErrorNotification: FC<Props> = ({\n   errorType,\n   handleClosingError,\n-  errorCases,\n+  \n }) => {\n   const [startTimeout] = useTimeout(handleClosingError, 3000);\n \n   useEffect(() => {\n"
                },
                {
                    "date": 1715157819650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n-import { FC, useEffect } from 'react';\n+import { FC, useEffect, useMemo } from 'react';\n \n import { useTimeout } from './useTimeout';\n import React from 'react';\n+import { ErrorTypes } from '../types/Error';\n \n export const errors = {\n   load: {\n     message: 'Unable to load todos',\n@@ -25,16 +26,35 @@\n \n type Props = {\n   errorType: ErrorType | null;\n   handleClosingError: () => void;\n+  errorCases: {};\n+  updateErrorCases: (\n+    value: boolean,\n+    error: keyof ErrorTypes | 'all',\n+  ) => void;\n };\n \n export const ErrorNotification: FC<Props> = ({\n   errorType,\n   handleClosingError,\n+  errorCases,\n+  updateErrorCases,\n }) => {\n   const [startTimeout] = useTimeout(handleClosingError, 3000);\n \n+  const detectFailCase = useMemo(() => {\n+    // const fail = Object.entries(errorCases).filter(case => case[1]);\n+\n+    if (fail.length === 0) {\n+      return null;\n+    } else {\n+      setTimeout(() => {\n+\n+      })\n+    }\n+\n+  }, [errorCases])\n   useEffect(() => {\n     startTimeout();\n   }, [errorType, startTimeout]);\n   const message = errorType ? errors[errorType].message : '';\n"
                }
            ],
            "date": 1715157217555,
            "name": "Commit-0",
            "content": "import { FC, useEffect } from 'react';\n\nimport { useTimeout } from './useTimeout';\nimport React from 'react';\n\nexport const errors = {\n  load: {\n    message: 'Unable to load todos',\n  },\n  add: {\n    message: 'Unable to add todo',\n  },\n  delete: {\n    message: 'Unable to delete todo',\n  },\n  update: {\n    message: 'Unable to update todo',\n  },\n  empty: {\n    message: 'Title cannot be empty',\n  },\n};\n\nexport type ErrorType = keyof typeof errors;\n\ntype Props = {\n  errorType: ErrorType | null;\n  handleClosingError: () => void;\n  errorCases: {};\n};\n\nexport const ErrorNotification: FC<Props> = ({\n  errorType,\n  handleClosingError,\n  errorCases\n}) => {\n  const [startTimeout] = useTimeout(handleClosingError, 3000);\n\n  useEffect(() => {\n    startTimeout();\n  }, [errorType, startTimeout]);\n  const message = errorType ? errors[errorType].message : '';\n\n  return (\n    <div\n      data-cy=\"ErrorNotification\"\n      className={`notification is-danger is-light has-text-weight-normal ${!message ? 'hidden' : ''}`}\n    >\n      <button\n        data-cy=\"HideErrorButton\"\n        type=\"button\"\n        className=\"delete\"\n        onClick={handleClosingError}\n      />\n      {message}\n    </div>\n  );\n};\n"
        }
    ]
}